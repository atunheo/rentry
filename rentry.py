import streamlit as st
import pandas as pd
import requests
import io
import time
import logging
from typing import Dict, Any, Optional

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Rentry Bulk Poster", 
    page_icon="üê∑", 
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("üê∑ Rentry Bulk Poster")
st.write("Upload file Excel c√≥ c·ªôt **content**, app s·∫Ω ƒëƒÉng t·ª´ng b√†i l√™n [rentry.co](https://rentry.co).")

# Sidebar v·ªõi th√¥ng tin
with st.sidebar:
    st.header("‚ÑπÔ∏è Th√¥ng tin")
    st.write("**C√°ch s·ª≠ d·ª•ng:**")
    st.write("1. Chu·∫©n b·ªã file Excel v·ªõi c·ªôt 'content'")
    st.write("2. Upload file v√† xem preview")
    st.write("3. Nh·∫•n 'B·∫Øt ƒë·∫ßu ƒëƒÉng'")
    st.write("4. T·∫£i file k·∫øt qu·∫£")
    
    st.header("‚ö†Ô∏è L∆∞u √Ω")
    st.write("- M·ªói b√†i ƒëƒÉng c√°ch nhau 3 gi√¢y")
    st.write("- N·∫øu API fail s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang form")
    st.write("- Ki·ªÉm tra k·∫øt qu·∫£ tr∆∞·ªõc khi t·∫£i file")

uploaded_file = st.file_uploader("üìÇ Ch·ªçn file Excel (.xlsx)", type=["xlsx"])
delay = st.number_input("‚è± Gi√£n c√°ch gi·ªØa c√°c b√†i (gi√¢y)", min_value=0.0, value=3.0, step=0.5)

# Headers gi·∫£ l·∫≠p tr√¨nh duy·ªát
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                  "(KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "en-US,en;q=0.9",
    "Origin": "https://rentry.co",
    "Referer": "https://rentry.co/",
    "Connection": "keep-alive"
}

def validate_content(content: str) -> bool:
    """Ki·ªÉm tra content c√≥ h·ª£p l·ªá kh√¥ng"""
    if not content or content.strip() == "":
        return False
    if len(content.strip()) < 10:
        return False
    if content.lower() in ["nan", "null", "none"]:
        return False
    return True

def post_rentry(content: str, max_retries: int = 2) -> Dict[str, Any]:
    """
    ƒêƒÉng b√†i l√™n rentry b·∫±ng API, n·∫øu fail th√¨ fallback sang form submit
    """
    # Validate content
    if not validate_content(content):
        return {"error": "Content kh√¥ng h·ª£p l·ªá ho·∫∑c qu√° ng·∫Øn"}
    
    data = {"text": content.strip()}
    logger.info(f"ƒêang ƒëƒÉng b√†i v·ªõi {len(content)} k√Ω t·ª±")

    # --- API Mode v·ªõi retry ---
    for attempt in range(max_retries):
        try:
            r = requests.post("https://rentry.co/api/new", data=data, headers=HEADERS, timeout=30)
            logger.info(f"API attempt {attempt + 1}: Status {r.status_code}")
            
            if r.status_code == 200:
                try:
                    result = r.json()
                    logger.info("API th√†nh c√¥ng")
                    return result
                except Exception as e:
                    logger.warning(f"API tr·∫£ v·ªÅ kh√¥ng ph·∫£i JSON: {e}")
                    if attempt == max_retries - 1:
                        return {"error": "API tr·∫£ v·ªÅ kh√¥ng ph·∫£i JSON", "raw": r.text[:200]}
            else:
                logger.warning(f"API failed v·ªõi status {r.status_code}")
                if attempt == max_retries - 1:
                    # Th·ª≠ fallback
                    return post_rentry_form(content)
                    
        except Exception as e:
            logger.error(f"API Exception attempt {attempt + 1}: {e}")
            if attempt == max_retries - 1:
                return {"error": f"API Exception: {e}"}
        
        # Delay tr∆∞·ªõc khi retry
        if attempt < max_retries - 1:
            time.sleep(2)
    
    return {"error": "T·∫•t c·∫£ attempts ƒë·ªÅu fail"}

def post_rentry_form(content: str) -> Dict[str, Any]:
    """
    Fallback: gi·∫£ l·∫≠p submit form web
    """
    logger.info("Chuy·ªÉn sang form mode")
    try:
        r = requests.post("https://rentry.co", data={"text": content}, headers=HEADERS, timeout=30)
        logger.info(f"Form mode: Status {r.status_code}, URL: {r.url}")
        
        if r.status_code == 200 and "rentry.co/" in r.url:
            # N·∫øu th√†nh c√¥ng, link s·∫Ω ·ªü r.url
            return {"url": r.url, "edit_code": "Ch·ªâ c√≥ khi d√πng API", "method": "form"}
        else:
            return {"error": f"Form mode fail: {r.status_code}", "raw": r.text[:200]}
    except Exception as e:
        logger.error(f"Form Exception: {e}")
        return {"error": f"Form Exception: {e}"}

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        logger.info(f"ƒê√£ load file Excel v·ªõi {len(df)} d√≤ng")

        if "content" not in df.columns:
            st.error("‚ùå File Excel ph·∫£i c√≥ c·ªôt t√™n l√† `content`.")
            st.write("**C√°c c·ªôt c√≥ s·∫µn:**", list(df.columns))
        else:
            st.write("üìã Xem tr∆∞·ªõc d·ªØ li·ªáu:")
            st.dataframe(df.head())
            
            # Th·ªëng k√™ d·ªØ li·ªáu
            total_rows = len(df)
            valid_content = df["content"].apply(lambda x: validate_content(str(x))).sum()
            st.info(f"üìä T·ªïng: {total_rows} d√≤ng, {valid_content} d√≤ng h·ª£p l·ªá")

            if st.button("üöÄ B·∫Øt ƒë·∫ßu ƒëƒÉng", type="primary"):
                # Progress bar
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                results = []
                success_count = 0
                error_count = 0

                for idx, row in df.iterrows():
                    content = str(row["content"]).strip()
                    
                    # Update progress
                    progress = (idx + 1) / total_rows
                    progress_bar.progress(progress)
                    status_text.text(f"ƒêang x·ª≠ l√Ω d√≤ng {idx + 1}/{total_rows}...")
                    
                    if not validate_content(content):
                        results.append({
                            "row": idx+1, 
                            "status": "‚ùå Content kh√¥ng h·ª£p l·ªá", 
                            "url": None, 
                            "edit_code": None,
                            "error": "Content qu√° ng·∫Øn ho·∫∑c tr·ªëng"
                        })
                        error_count += 1
                        continue

                    logger.info(f"ƒêang x·ª≠ l√Ω d√≤ng {idx + 1}")
                    res = post_rentry(content)

                    if "url" in res:
                        results.append({
                            "row": idx+1,
                            "status": "‚úÖ Th√†nh c√¥ng",
                            "url": res["url"],
                            "edit_code": res.get("edit_code", "N/A"),
                            "method": res.get("method", "API")
                        })
                        success_count += 1
                        logger.info(f"D√≤ng {idx + 1} th√†nh c√¥ng: {res['url']}")
                    else:
                        results.append({
                            "row": idx+1,
                            "status": f"‚ùå L·ªói",
                            "url": None,
                            "edit_code": None,
                            "error": str(res.get("error", "Unknown error"))
                        })
                        error_count += 1
                        logger.error(f"D√≤ng {idx + 1} l·ªói: {res}")

                    # Gi√£n c√°ch
                    if delay > 0 and idx < len(df) - 1:
                        time.sleep(delay)

                # Ho√†n th√†nh
                progress_bar.progress(1.0)
                status_text.text("Ho√†n t·∫•t!")
                
                result_df = pd.DataFrame(results)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("‚úÖ Th√†nh c√¥ng", success_count)
                with col2:
                    st.metric("‚ùå L·ªói", error_count)
                with col3:
                    st.metric("üìä T·ªïng", total_rows)
                
                st.success("üéâ Ho√†n t·∫•t ƒëƒÉng b√†i!")
                st.dataframe(result_df)

                # Xu·∫•t Excel k·∫øt qu·∫£
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine="openpyxl") as writer:
                    result_df.to_excel(writer, index=False, sheet_name="Results")
                output.seek(0)

                st.download_button(
                    label="üì• T·∫£i file k·∫øt qu·∫£",
                    data=output,
                    file_name=f"rentry_results_{int(time.time())}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {e}")
        logger.error(f"File read error: {e}")
