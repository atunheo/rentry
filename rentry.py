import streamlit as st
import pandas as pd
import requests
import io
import time
import logging
import re
from typing import Dict, Any, Optional

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Rentry Bulk Poster", 
    page_icon="üê∑", 
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("üê∑ Dpaste Bulk Poster")
st.write("Upload file Excel c√≥ c·ªôt **content**, app s·∫Ω ƒëƒÉng t·ª´ng b√†i l√™n [dpaste.com](https://dpaste.com) (∆∞u ti√™n) v√† [rentry.co](https://rentry.co) (fallback).")

# Sidebar v·ªõi th√¥ng tin
with st.sidebar:
    st.header("‚ÑπÔ∏è Th√¥ng tin")
    st.write("**C√°ch s·ª≠ d·ª•ng:**")
    st.write("1. Chu·∫©n b·ªã file Excel v·ªõi c·ªôt 'content'")
    st.write("2. Upload file v√† xem preview")
    st.write("3. Ch·ªçn t√πy ch·ªçn chuy·ªÉn ƒë·ªïi Markdown")
    st.write("4. Nh·∫•n 'B·∫Øt ƒë·∫ßu ƒëƒÉng'")
    st.write("5. T·∫£i file k·∫øt qu·∫£")
    
    st.header("üìù H·ªó tr·ª£ Markdown")
    st.write("- **[text](url)** ‚Üí **text (url)**")
    st.write("- **https://example.com** ‚Üí **(https://example.com)**")
    st.write("- **Bold**, *Italic*, `Code` ‚Üí Plain text")
    st.write("- Headers, Lists ‚Üí Clean text")
    
    st.header("‚ö†Ô∏è L∆∞u √Ω")
    st.write("- M·ªói b√†i ƒëƒÉng c√°ch nhau 3 gi√¢y")
    st.write("- **API** ‚Üí **Session** ‚Üí **Form** (3 ph∆∞∆°ng th·ª©c)")
    st.write("- T·ª± ƒë·ªông retry khi g·∫∑p l·ªói 403/500")
    st.write("- Ki·ªÉm tra k·∫øt qu·∫£ tr∆∞·ªõc khi t·∫£i file")
    
    st.header("üîß Ph∆∞∆°ng th·ª©c ƒëƒÉng")
    st.write("1. **Dpaste API**: `dpaste.com/api/v2/` (∆∞u ti√™n)")
    st.write("2. **Rentry API**: `rentry.co/api/new`")
    st.write("3. **Session Mode**: Duy tr√¨ cookies")
    st.write("4. **Form Mode**: 3 ph∆∞∆°ng th·ª©c kh√°c nhau")
    st.write("5. **Selenium Mode**: Gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t")
    st.write("6. **Alternative**: 0x0.st, pastebin.com")
    
    st.header("‚ö†Ô∏è Y√™u c·∫ßu h·ªá th·ªëng")
    st.write("- **Chrome/Chromium** cho Selenium")
    st.write("- **ChromeDriver** t·ª± ƒë·ªông t·∫£i")
    st.write("- **Internet** ·ªïn ƒë·ªãnh")

uploaded_file = st.file_uploader("üìÇ Ch·ªçn file Excel (.xlsx)", type=["xlsx"])
delay = st.number_input("‚è± Gi√£n c√°ch gi·ªØa c√°c b√†i (gi√¢y)", min_value=0.0, value=3.0, step=0.5)

# T√πy ch·ªçn chuy·ªÉn ƒë·ªïi Markdown
col1, col2 = st.columns(2)
with col1:
    convert_markdown = st.checkbox("üîÑ Chuy·ªÉn Markdown th√†nh vƒÉn b·∫£n thu·∫ßn", value=True, help="Chuy·ªÉn ƒë·ªïi [text](url) th√†nh text (url)")
with col2:
    show_preview = st.checkbox("üëÅÔ∏è Xem tr∆∞·ªõc chuy·ªÉn ƒë·ªïi", value=False, help="Hi·ªÉn th·ªã n·ªôi dung sau khi chuy·ªÉn ƒë·ªïi")

# Headers gi·∫£ l·∫≠p tr√¨nh duy·ªát
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                  "(KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "en-US,en;q=0.9",
    "Origin": "https://rentry.co",
    "Referer": "https://rentry.co/",
    "Connection": "keep-alive"
}

def convert_markdown_to_plain_text(markdown_text: str) -> str:
    """
    Chuy·ªÉn ƒë·ªïi Markdown th√†nh vƒÉn b·∫£n thu·∫ßn v·ªõi hyperlink
    """
    if not markdown_text:
        return markdown_text
    
    text = markdown_text
    
    # Chuy·ªÉn ƒë·ªïi c√°c link markdown [text](url) th√†nh text (url)
    link_pattern = r'\[([^\]]+)\]\(([^)]+)\)'
    text = re.sub(link_pattern, r'\1 (\2)', text)
    
    # Chuy·ªÉn ƒë·ªïi c√°c link tr·ª±c ti·∫øp th√†nh text (url)
    url_pattern = r'(https?://[^\s]+)'
    text = re.sub(url_pattern, r'(\1)', text)
    
    # Lo·∫°i b·ªè c√°c markdown formatting
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # Bold **text**
    text = re.sub(r'\*(.*?)\*', r'\1', text)      # Italic *text*
    text = re.sub(r'`(.*?)`', r'\1', text)        # Code `text`
    text = re.sub(r'#{1,6}\s*', '', text)         # Headers # ## ###
    text = re.sub(r'^\s*[-*+]\s*', '', text, flags=re.MULTILINE)  # List items
    text = re.sub(r'^\s*\d+\.\s*', '', text, flags=re.MULTILINE)  # Numbered lists
    
    # Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng th·ª´a
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)
    
    return text.strip()

def validate_content(content: str) -> bool:
    """Ki·ªÉm tra content c√≥ h·ª£p l·ªá kh√¥ng"""
    if not content or content.strip() == "":
        return False
    # Gi·∫£m y√™u c·∫ßu ƒë·ªô d√†i t·ªëi thi·ªÉu t·ª´ 10 xu·ªëng 3 k√Ω t·ª±
    if len(content.strip()) < 3:
        return False
    if content.lower() in ["nan", "null", "none", "undefined"]:
        return False
    return True

def post_rentry_with_session(content: str) -> Dict[str, Any]:
    """
    Th·ª≠ ƒëƒÉng b√†i v·ªõi session ƒë·ªÉ duy tr√¨ cookies
    """
    logger.info("Th·ª≠ v·ªõi session mode")
    try:
        session = requests.Session()
        session.headers.update(HEADERS)
        
        # L·∫•y trang ch·ªß tr∆∞·ªõc ƒë·ªÉ c√≥ cookies
        session.get("https://rentry.co", timeout=30)
        
        # Th·ª≠ API v·ªõi session
        r = session.post("https://rentry.co/api/new", data={"text": content}, timeout=30)
        logger.info(f"Session API: Status {r.status_code}")
        
        if r.status_code == 200:
            try:
                result = r.json()
                logger.info("Session API th√†nh c√¥ng")
                return result
            except Exception:
                pass
        
        # Th·ª≠ form v·ªõi session
        r = session.post("https://rentry.co", data={"text": content}, timeout=30)
        logger.info(f"Session Form: Status {r.status_code}, URL: {r.url}")
        
        if r.status_code == 200 and "rentry.co/" in r.url:
            return {"url": r.url, "edit_code": "Session mode", "method": "session"}
        
        return {"error": f"Session mode fail: {r.status_code}"}
        
    except Exception as e:
        logger.error(f"Session Exception: {e}")
        return {"error": f"Session Exception: {e}"}

def post_rentry(content: str, max_retries: int = 2) -> Dict[str, Any]:
    """
    ƒêƒÉng b√†i l√™n dpaste.com tr∆∞·ªõc, n·∫øu fail th√¨ th·ª≠ rentry
    """
    # Validate content
    if not validate_content(content):
        return {"error": "Content kh√¥ng h·ª£p l·ªá ho·∫∑c qu√° ng·∫Øn"}
    
    logger.info(f"ƒêang ƒëƒÉng b√†i v·ªõi {len(content)} k√Ω t·ª±")

    # --- Th·ª≠ dpaste tr∆∞·ªõc (∆∞u ti√™n cao nh·∫•t) ---
    dpaste_result = post_dpaste(content)
    if "url" in dpaste_result:
        return dpaste_result
    
    # --- N·∫øu dpaste fail, th·ª≠ rentry API ---
    data = {"text": content.strip()}
    for attempt in range(max_retries):
        try:
            r = requests.post("https://rentry.co/api/new", data=data, headers=HEADERS, timeout=30)
            logger.info(f"Rentry API attempt {attempt + 1}: Status {r.status_code}")
            
            if r.status_code == 200:
                try:
                    result = r.json()
                    logger.info("Rentry API th√†nh c√¥ng")
                    return result
                except Exception as e:
                    logger.warning(f"Rentry API tr·∫£ v·ªÅ kh√¥ng ph·∫£i JSON: {e}")
                    if attempt == max_retries - 1:
                        # Th·ª≠ session mode
                        session_result = post_rentry_with_session(content)
                        if "url" in session_result:
                            return session_result
                        # Th·ª≠ alternative services
                        return post_rentry_alternative(content)
            else:
                logger.warning(f"Rentry API failed v·ªõi status {r.status_code}")
                if attempt == max_retries - 1:
                    # Th·ª≠ session mode
                    session_result = post_rentry_with_session(content)
                    if "url" in session_result:
                        return session_result
                    # Th·ª≠ form mode
                    form_result = post_rentry_form(content)
                    if "url" in form_result:
                        return form_result
                    # Th·ª≠ selenium mode
                    selenium_result = post_rentry_selenium(content)
                    if "url" in selenium_result:
                        return selenium_result
                    # Th·ª≠ alternative services
                    return post_rentry_alternative(content)
                    
        except Exception as e:
            logger.error(f"Rentry API Exception attempt {attempt + 1}: {e}")
            if attempt == max_retries - 1:
                # Th·ª≠ session mode
                session_result = post_rentry_with_session(content)
                if "url" in session_result:
                    return session_result
                # Th·ª≠ form mode
                form_result = post_rentry_form(content)
                if "url" in form_result:
                    return form_result
                # Th·ª≠ selenium mode
                selenium_result = post_rentry_selenium(content)
                if "url" in selenium_result:
                    return selenium_result
                # Th·ª≠ alternative services
                return post_rentry_alternative(content)
        
        # Delay tr∆∞·ªõc khi retry
        if attempt < max_retries - 1:
            time.sleep(2)
    
    return {"error": "T·∫•t c·∫£ attempts ƒë·ªÅu fail"}

def post_rentry_form(content: str) -> Dict[str, Any]:
    """
    Fallback: gi·∫£ l·∫≠p submit form web v·ªõi nhi·ªÅu ph∆∞∆°ng th·ª©c
    """
    logger.info("Chuy·ªÉn sang form mode")
    
    # Th·ª≠ nhi·ªÅu ph∆∞∆°ng th·ª©c kh√°c nhau
    methods = [
        {"url": "https://rentry.co", "data": {"text": content}},
        {"url": "https://rentry.co/", "data": {"text": content}},
        {"url": "https://rentry.co/new", "data": {"text": content}},
    ]
    
    for i, method in enumerate(methods):
        try:
            logger.info(f"Form method {i+1}: {method['url']}")
            
            # Headers kh√°c nhau cho t·ª´ng ph∆∞∆°ng th·ª©c
            headers = HEADERS.copy()
            if i == 1:
                headers["Content-Type"] = "application/x-www-form-urlencoded"
            elif i == 2:
                headers["X-Requested-With"] = "XMLHttpRequest"
            
            r = requests.post(method["url"], data=method["data"], headers=headers, timeout=30)
            logger.info(f"Form method {i+1}: Status {r.status_code}, URL: {r.url}")
            
            if r.status_code == 200:
                # Ki·ªÉm tra response c√≥ ch·ª©a link rentry kh√¥ng
                if "rentry.co/" in r.url or "rentry.co/" in r.text:
                    # T√¨m link trong response
                    import re
                    link_match = re.search(r'https://rentry\.co/[a-zA-Z0-9]+', r.text)
                    if link_match:
                        return {
                            "url": link_match.group(), 
                            "edit_code": "Ch·ªâ c√≥ khi d√πng API", 
                            "method": f"form_{i+1}"
                        }
                    elif "rentry.co/" in r.url:
                        return {
                            "url": r.url, 
                            "edit_code": "Ch·ªâ c√≥ khi d√πng API", 
                            "method": f"form_{i+1}"
                        }
            
            # N·∫øu kh√¥ng th√†nh c√¥ng, th·ª≠ ph∆∞∆°ng th·ª©c ti·∫øp theo
            if i < len(methods) - 1:
                time.sleep(1)  # Delay gi·ªØa c√°c attempts
                
        except Exception as e:
            logger.error(f"Form method {i+1} Exception: {e}")
            if i == len(methods) - 1:  # L·∫ßn cu·ªëi c√πng
                return {"error": f"T·∫•t c·∫£ form methods ƒë·ªÅu fail: {e}"}
    
    return {"error": f"Form mode fail: 403 - T·∫•t c·∫£ ph∆∞∆°ng th·ª©c ƒë·ªÅu b·ªã t·ª´ ch·ªëi"}

def post_rentry_selenium(content: str) -> Dict[str, Any]:
    """
    Ph∆∞∆°ng th·ª©c Selenium: Gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t
    """
    logger.info("Th·ª≠ v·ªõi Selenium mode")
    try:
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.webdriver.chrome.options import Options
        from selenium.common.exceptions import TimeoutException, WebDriverException
        
        # C·∫•u h√¨nh Chrome headless
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36")
        
        driver = None
        try:
            driver = webdriver.Chrome(options=chrome_options)
            driver.get("https://rentry.co")
            
            # T√¨m textarea v√† nh·∫≠p content
            wait = WebDriverWait(driver, 10)
            textarea = wait.until(EC.presence_of_element_located((By.NAME, "text")))
            textarea.clear()
            textarea.send_keys(content)
            
            # T√¨m v√† click submit button
            submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # Ch·ªù redirect v√† l·∫•y URL
            wait.until(lambda driver: "rentry.co/" in driver.current_url)
            result_url = driver.current_url
            
            logger.info(f"Selenium th√†nh c√¥ng: {result_url}")
            return {"url": result_url, "edit_code": "Selenium mode", "method": "selenium"}
            
        except TimeoutException:
            logger.error("Selenium timeout - kh√¥ng t√¨m th·∫•y element")
            return {"error": "Selenium timeout"}
        except WebDriverException as e:
            logger.error(f"Selenium WebDriver error: {e}")
            return {"error": f"Selenium WebDriver error: {e}"}
        finally:
            if driver:
                driver.quit()
                
    except ImportError:
        logger.warning("Selenium kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return {"error": "Selenium kh√¥ng kh·∫£ d·ª•ng - c·∫ßn c√†i ƒë·∫∑t selenium"}
    except Exception as e:
        logger.error(f"Selenium Exception: {e}")
        return {"error": f"Selenium Exception: {e}"}

def post_dpaste(content: str) -> Dict[str, Any]:
    """
    ƒêƒÉng b√†i l√™n dpaste.com - ph∆∞∆°ng th·ª©c ch√≠nh
    """
    logger.info("ƒêƒÉng b√†i l√™n dpaste.com")
    try:
        data = {"content": content, "syntax": "text"}
        r = requests.post("https://dpaste.com/api/v2/", data=data, timeout=30)
        logger.info(f"Dpaste API: Status {r.status_code}")
        
        if r.status_code == 201:
            result_url = r.text.strip()
            logger.info(f"Dpaste th√†nh c√¥ng: {result_url}")
            return {"url": result_url, "edit_code": "Dpaste API", "method": "dpaste"}
        else:
            return {"error": f"Dpaste API failed: {r.status_code}", "raw": r.text[:200]}
            
    except Exception as e:
        logger.error(f"Dpaste Exception: {e}")
        return {"error": f"Dpaste Exception: {e}"}

def post_rentry_alternative(content: str) -> Dict[str, Any]:
    """
    Ph∆∞∆°ng th·ª©c thay th·∫ø: Th·ª≠ c√°c service paste kh√°c
    """
    logger.info("Th·ª≠ ph∆∞∆°ng th·ª©c thay th·∫ø")
    
    # Th·ª≠ 0x0.st
    try:
        files = {"file": content.encode()}
        r = requests.post("https://0x0.st", files=files, timeout=30)
        if r.status_code == 200:
            result_url = r.text.strip()
            logger.info(f"0x0.st th√†nh c√¥ng: {result_url}")
            return {"url": result_url, "edit_code": "0x0.st mode", "method": "0x0.st"}
    except Exception as e:
        logger.warning(f"0x0.st failed: {e}")
    
    # Th·ª≠ pastebin.com
    try:
        data = {"api_dev_key": "anonymous", "api_option": "paste", "api_paste_code": content}
        r = requests.post("https://pastebin.com/api/api_post.php", data=data, timeout=30)
        if r.status_code == 200 and "http" in r.text:
            result_url = r.text.strip()
            logger.info(f"Pastebin th√†nh c√¥ng: {result_url}")
            return {"url": result_url, "edit_code": "Pastebin mode", "method": "pastebin"}
    except Exception as e:
        logger.warning(f"Pastebin failed: {e}")
    
    return {"error": "T·∫•t c·∫£ ph∆∞∆°ng th·ª©c thay th·∫ø ƒë·ªÅu fail"}

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        logger.info(f"ƒê√£ load file Excel v·ªõi {len(df)} d√≤ng")

        if "content" not in df.columns:
            st.error("‚ùå File Excel ph·∫£i c√≥ c·ªôt t√™n l√† `content`.")
            st.write("**C√°c c·ªôt c√≥ s·∫µn:**", list(df.columns))
        else:
            st.write("üìã Xem tr∆∞·ªõc d·ªØ li·ªáu:")
            st.dataframe(df.head())
            
            # Th·ªëng k√™ d·ªØ li·ªáu
            total_rows = len(df)
            valid_content = df["content"].apply(lambda x: validate_content(str(x))).sum()
            invalid_content = total_rows - valid_content
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìä T·ªïng d√≤ng", total_rows)
            with col2:
                st.metric("‚úÖ H·ª£p l·ªá", valid_content)
            with col3:
                st.metric("‚ùå Kh√¥ng h·ª£p l·ªá", invalid_content)
            
            # Hi·ªÉn th·ªã c√°c d√≤ng kh√¥ng h·ª£p l·ªá ƒë·ªÉ debug
            if invalid_content > 0:
                st.warning(f"‚ö†Ô∏è C√≥ {invalid_content} d√≤ng kh√¥ng h·ª£p l·ªá:")
                invalid_rows = []
                for idx, row in df.iterrows():
                    content = str(row["content"]).strip()
                    if not validate_content(content):
                        invalid_rows.append({
                            "D√≤ng": idx + 1,
                            "Content": content[:100] + "..." if len(content) > 100 else content,
                            "ƒê·ªô d√†i": len(content)
                        })
                
                if invalid_rows:
                    st.dataframe(pd.DataFrame(invalid_rows))
            
            # Hi·ªÉn th·ªã preview chuy·ªÉn ƒë·ªïi Markdown n·∫øu ƒë∆∞·ª£c ch·ªçn
            if show_preview and convert_markdown:
                st.subheader("üëÅÔ∏è Xem tr∆∞·ªõc chuy·ªÉn ƒë·ªïi Markdown")
                preview_rows = []
                for idx, row in df.head(3).iterrows():  # Ch·ªâ hi·ªÉn th·ªã 3 d√≤ng ƒë·∫ßu
                    original = str(row["content"]).strip()
                    converted = convert_markdown_to_plain_text(original)
                    preview_rows.append({
                        "D√≤ng": idx + 1,
                        "Markdown g·ªëc": original[:100] + "..." if len(original) > 100 else original,
                        "VƒÉn b·∫£n thu·∫ßn": converted[:100] + "..." if len(converted) > 100 else converted
                    })
                
                if preview_rows:
                    st.dataframe(pd.DataFrame(preview_rows))
                    st.info("üí° Ch·ªâ hi·ªÉn th·ªã 3 d√≤ng ƒë·∫ßu ti√™n ƒë·ªÉ preview")

            if st.button("üöÄ B·∫Øt ƒë·∫ßu ƒëƒÉng", type="primary"):
                # Progress bar
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                results = []
                success_count = 0
                error_count = 0

                for idx, row in df.iterrows():
                    content = str(row["content"]).strip()
                    
                    # Chuy·ªÉn ƒë·ªïi Markdown n·∫øu ƒë∆∞·ª£c ch·ªçn
                    if convert_markdown:
                        content = convert_markdown_to_plain_text(content)
                    
                    # Update progress
                    progress = (idx + 1) / total_rows
                    progress_bar.progress(progress)
                    status_text.text(f"ƒêang x·ª≠ l√Ω d√≤ng {idx + 1}/{total_rows}...")
                    
                    if not validate_content(content):
                        # Debug info cho content kh√¥ng h·ª£p l·ªá
                        debug_info = f"Content: '{content[:50]}...' (Length: {len(content)})"
                        results.append({
                            "row": idx+1, 
                            "status": "‚ùå Content kh√¥ng h·ª£p l·ªá", 
                            "url": None, 
                            "edit_code": None,
                            "error": f"Content qu√° ng·∫Øn ho·∫∑c tr·ªëng - {debug_info}"
                        })
                        error_count += 1
                        logger.warning(f"D√≤ng {idx + 1} content kh√¥ng h·ª£p l·ªá: {debug_info}")
                        continue

                    logger.info(f"ƒêang x·ª≠ l√Ω d√≤ng {idx + 1}")
                    res = post_rentry(content)

                    if "url" in res:
                        results.append({
                            "row": idx+1,
                            "status": "‚úÖ Th√†nh c√¥ng",
                            "url": res["url"],
                            "edit_code": res.get("edit_code", "N/A"),
                            "method": res.get("method", "API")
                        })
                        success_count += 1
                        logger.info(f"D√≤ng {idx + 1} th√†nh c√¥ng: {res['url']}")
                    else:
                        results.append({
                            "row": idx+1,
                            "status": f"‚ùå L·ªói",
                            "url": None,
                            "edit_code": None,
                            "error": str(res.get("error", "Unknown error"))
                        })
                        error_count += 1
                        logger.error(f"D√≤ng {idx + 1} l·ªói: {res}")

                    # Gi√£n c√°ch
                    if delay > 0 and idx < len(df) - 1:
                        time.sleep(delay)

                # Ho√†n th√†nh
                progress_bar.progress(1.0)
                status_text.text("Ho√†n t·∫•t!")
                
                result_df = pd.DataFrame(results)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("‚úÖ Th√†nh c√¥ng", success_count)
                with col2:
                    st.metric("‚ùå L·ªói", error_count)
                with col3:
                    st.metric("üìä T·ªïng", total_rows)
                
                st.success("üéâ Ho√†n t·∫•t ƒëƒÉng b√†i!")
                st.dataframe(result_df)

                # Xu·∫•t Excel k·∫øt qu·∫£
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine="openpyxl") as writer:
                    result_df.to_excel(writer, index=False, sheet_name="Results")
                output.seek(0)

                st.download_button(
                    label="üì• T·∫£i file k·∫øt qu·∫£",
                    data=output,
                    file_name=f"rentry_results_{int(time.time())}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {e}")
        logger.error(f"File read error: {e}")
